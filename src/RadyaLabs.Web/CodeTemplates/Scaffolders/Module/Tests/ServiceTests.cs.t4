<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using AutoMapper;
using AutoMapper.QueryableExtensions;
using RadyaLabs.Data.Core;
using RadyaLabs.Objects;
using RadyaLabs.Services;
using RadyaLabs.Tests.Data;
using System;
using System.Linq;
using Xunit;

namespace RadyaLabs.Tests.Unit.Services
{
    public class <#= Model.Service #>Tests : IDisposable
    {
        private <#= Model.Service #> service;
        private TestingContext context;
        private <#= Model.Model #> <#= Model.ModelVarName #>;

        public <#= Model.Service #>Tests()
        {
            context = new TestingContext();
            service = new <#= Model.Service #>(new UnitOfWork(context));

            context.DropData();
            SetUpData();
        }
        public void Dispose()
        {
            service.Dispose();
            context.Dispose();
        }

        #region Get<TView>(Int32 id)

        [Fact]
        public void Get_ReturnsViewById()
        {
            <#= Model.View #> actual = service.Get<<#= Model.View #>>(<#= Model.ModelVarName #>.Id);
            <#= Model.View #> expected = Mapper.Map<<#= Model.View #>>(<#= Model.ModelVarName #>);

            Assert.Equal(expected.CreationDate, actual.CreationDate);
            Assert.Equal(expected.Id, actual.Id);

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region GetViews()

        [Fact]
        public void GetViews_Returns<#= Model.ShortModel #>Views()
        {
            <#= Model.View #>[] actual = service.GetViews().ToArray();
            <#= Model.View #>[] expected = context
                .Set<<#= Model.Model #>>()
                .ProjectTo<<#= Model.View #>>()
                .OrderByDescending(view => view.Id)
                .ToArray();

            for (Int32 i = 0; i < expected.Length || i < actual.Length; i++)
            {
                Assert.Equal(expected[i].CreationDate, actual[i].CreationDate);
                Assert.Equal(expected[i].Id, actual[i].Id);
            }

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region Create(<#= Model.View #> view)

        [Fact]
        public void Create_<#= Model.ShortModel #>()
        {
            <#= Model.View #> view = ObjectFactory.Create<#= Model.View #>(1);

            service.Create(view);

            <#= Model.Model #> actual = context.Set<<#= Model.Model #>>().AsNoTracking().Single(model => model.Id != <#= Model.ModelVarName #>.Id);
            <#= Model.View #> expected = view;

            Assert.Equal(expected.CreationDate, actual.CreationDate);

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region Edit(<#= Model.View #> view)

        [Fact]
        public void Edit_<#= Model.ShortModel #>()
        {
            <#= Model.View #> view = ObjectFactory.Create<#= Model.View #>(<#= Model.ModelVarName #>.Id);
            Assert.True(false, "No update made");

            service.Edit(view);

            <#= Model.Model #> actual = context.Set<<#= Model.Model #>>().AsNoTracking().Single();
            <#= Model.Model #> expected = <#= Model.ModelVarName #>;

            Assert.Equal(expected.CreationDate, actual.CreationDate);
            Assert.Equal(expected.Id, actual.Id);

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region Delete(Int32 id)

        [Fact]
        public void Delete_<#= Model.ShortModel #>()
        {
            service.Delete(<#= Model.ModelVarName #>.Id);

            Assert.Empty(context.Set<<#= Model.Model #>>());
        }

        #endregion

        #region Test helpers

        private void SetUpData()
        {
            <#= Model.ModelVarName #> = ObjectFactory.Create<#= Model.Model #>();

            using (TestingContext context = new TestingContext())
            {
                context.Set<<#= Model.Model #>>().Add(<#= Model.ModelVarName #>);
                context.SaveChanges();
            }
        }

        #endregion
    }
}
